;==============================================================================
; DEMON - copy(l)eft 2018 http://harald.ist.org/
; tabsize=8
;==============================================================================


;==============================================================================
!zone ELFN_HEXDUMP
;==============================================================================

	.ddrmask	= client_bank

	.color_ram	= cram_black
	.color_ubasic	= cram_blue
	.color_devices	= cram_green
	.color_ukernal	= cram_red
	.color_charrom	= cram_brown
	.color_basic	= cram_lblue
	.color_kernal	= cram_lred

	.start_ptr = $f7		; Shared with elfn_hexinput!
	.end_ptr   = $f9


hexdump_show_line
;-----------------------------------------------------------------------------
		LDA #':'
		JSR putc

		SEI
		LDA $01			; Select RAM/ROM in DDR
		PHA
		AND #$f8
		ORA .ddrmask
		STA $01

		LDY #$07		; Copy 8 bytes from target memory ..
hexd_buffer_next
		LDA (.start_ptr),Y	; .. to buffer
		STA hexd_buffer,Y
		DEY
		BPL hexd_buffer_next

		PLA			; Restore DDR
		STA $01

		CLI
;------------------------------------------------------------------------------
		; Set colors for every byte in the current row according to
		; the memory area

!ifdef HEXDUMP_COLORS {
		LDY #$07		; Check ROM color for each byte
.loop_colors	CLC			; Calculate hi byte of address
		TYA
		ADC .start_ptr
		STA hexd_address
		LDA .start_ptr+1
		ADC #$00
		STA hexd_address+1

		LDA #.color_ram		; Default: RAM color
		STA hexd_colors,Y

.check_basic	LDA hexd_address+1
		CMP #$a0		; BASIC ROM $a000-$bfff?
		BCC .check_char
		CMP #$c0
		BCS .check_char
		LDA .ddrmask		; BASIC ROM mapped in?
		AND #$01
		BEQ .ubasic
.basic		LDA #.color_basic
		JMP .save_rom_color
.ubasic		LDA #.color_ubasic
		JMP .save_rom_color

.check_char	LDA hexd_address+1
		CMP #$d0		; CHAR ROM $d000-$dfff?
		BCC .check_kernal
		CMP #$e0
		BCS .check_kernal
		LDA .ddrmask		; CHAR ROM mapped in?
		AND #$04
		BNE .devices
.charrom	LDA #.color_charrom
		JMP .save_rom_color
.devices	LDA #.color_devices	; VIC, SID, CIA
		JMP .save_rom_color

.check_kernal	LDA hexd_address+1
		CMP #$e0		; KERNAL ROM $e000-$ffff?
		BCC .color_done
		;CMP #$ff
		;BCS #.color_done
		LDA .ddrmask		; KERNAL ROM mapped in?
		AND #$02
		BEQ .ukernal
.kernal		LDA #.color_kernal
		JMP .save_rom_color
.ukernal	LDA #.color_ukernal
		;JMP .save_rom_color

.save_rom_color	STA hexd_colors,Y
.color_done	DEY
		BPL .loop_colors
}
;-----------------------------------------------------------------------------
		; Show address for current line

hexd_address_out	SEC			; Adjust address for offset
		LDA .start_ptr
		SBC hexd_offset
		STA hexd_address
		LDA .start_ptr+1
		SBC hexd_offset+1
		STA hexd_address+1

!ifdef HEXDUMP_COLORS {
		LDA hexd_colors
		STA puts_color
}
		LDA hexd_address+1		; Print address of line
		JSR puts_hexbyte

		LDA hexd_address
		JSR puts_hexbyte
		LDA #' '		; Space
		JSR putc
;-----------------------------------------------------------------------------
		; Show 8 bytes as hex values

		LDY #$00
.next_byte
!ifdef HEXDUMP_COLORS {
		LDA hexd_colors,Y
		STA puts_color
}
		LDA hexd_buffer,Y
		JSR puts_hexbyte
		LDA #' '		; Space
		JSR putc
		INY
		CPY #$08
		BNE .next_byte
;-----------------------------------------------------------------------------
		; Show 8 bytes as characters like in FC3's monitor
		; MemValue     PETSCII
		; $00..$1f --> $40..$5f (inverse)
		; $20..$5f --> $20..$5f
		; $60..$7f --> $c0..$df
		; $80..$9f --> $40..$5f (inverse, upper case)
		; $a0..$df --> $20..$5f (upper case)
		; $e0..$ff -->  $c0..$df (upper case)

.text_out	LDA #':'
		JSR putc

		LDY #$00
.next_char	LDA hexd_buffer,Y
		STY hexd_temp

		TAX			; Keep original value
		AND #$7f		; Clear bit 7

		CMP #$20		; Control chars inverse
		BCS .skip_inverse
		ORA #$40
		JSR puts_rvs_on
.skip_inverse
.upper_case	CPX #$80		; Upper half: Upper case
		BCC .skip_upper
		ORA #$80
.skip_upper
.print_char	JSR putc
		JSR puts_rvs_off

.cont		LDY hexd_temp
		INY
		CPY #$08
		BNE .next_char
;-----------------------------------------------------------------------------
		CLC			; Increase pointer for following line
		LDA .start_ptr
		ADC #$08
		STA .start_ptr
		LDA .start_ptr+1
		ADC #$00
		STA .start_ptr+1
		RTS			; Returning carry from ADC # 8


hexdump_single_line
;==============================================================================
		STX .start_ptr
		STX .end_ptr
		STA .start_ptr+1
		STA .end_ptr+1
		JMP hexdump_show_line
		RTS


.error		JMP line_show_error

elfn_hexdump
;==============================================================================
		; Extract parameters from command string

		LDY # 1
		JSR line_expect_int16	; Read start address
		BCS .error		; If none, report error
		STX .start_ptr
		STA .start_ptr+1

		JSR line_expect_int16	; Read start address
		BCC .store_endptr	; If none, use start value as end
		LDX .start_ptr
		LDA .start_ptr+1
;-----------------------------------------------------------------------------
.store_endptr	STX .end_ptr
		STA .end_ptr+1

		LDA #$00		; NIY
		STA hexd_offset
		STA hexd_offset+1

		JSR goto_pos0		; Check, if "m" or ":" was used
		LDY # 0
		LDA (puts_vptr),Y
!convtab SCR {	CMP #':' }
		BEQ .skip_nl
		JSR puts_newline	; New line, if "m" was used
.skip_nl
;-----------------------------------------------------------------------------
.next_row	JSR hexdump_show_line
		BCS .done2

		JSR check_run_stop
		BCS .done2

		JSR puts_newline

		LDA .end_ptr+1		; .start_ptr > .end_ptr?
		CMP .start_ptr+1
		BCC .done
		BNE .next_row
		LDA .end_ptr
		CMP .start_ptr
		BCS .next_row
;-----------------------------------------------------------------------------
.done
!ifdef HEXDUMP_COLORS {
		LDA cramcolor_text	; Restore color in case, we are done
		STA puts_color
}
		SEC			; Prevent newline
		RTS


.done2
!ifdef HEXDUMP_COLORS {
		LDA cramcolor_text	; Restore color in case, we are done
		STA puts_color
}
		CLC			; Indicate no error, trigger new line
		RTS


;==============================================================================
!eof
